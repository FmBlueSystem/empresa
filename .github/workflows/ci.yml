name: BlueSystem.io CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Job 1: Linting y validación de código
  code-quality:
    name: 🔍 Code Quality & Linting
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            app/package-lock.json
            frontend/package-lock.json

      - name: 📦 Install Backend Dependencies
        working-directory: ./app
        run: npm ci
          
      - name: 📦 Install Frontend Dependencies
        working-directory: ./frontend
        run: npm ci

      - name: 🧹 Lint Backend Code
        working-directory: ./app
        run: npm run lint

      - name: 🧹 Lint Frontend Code
        working-directory: ./frontend
        run: npm run lint

  # Job 2: Tests del Backend
  backend-tests:
    name: 🧪 Backend Tests
    runs-on: ubuntu-latest
    needs: code-quality
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: test_root_password
          MYSQL_DATABASE: bluesystem_test
          MYSQL_USER: test_user
          MYSQL_PASSWORD: test_password
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd="redis-cli ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: app/package-lock.json

      - name: 📦 Install Backend Dependencies
        working-directory: ./app
        run: npm ci

      - name: 🧪 Run Backend Tests
        working-directory: ./app
        env:
          NODE_ENV: test
          DB_HOST: localhost
          DB_PORT: 3306
          DB_USER: test_user
          DB_PASSWORD: test_password
          DB_NAME: bluesystem_test
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          JWT_SECRET: test-jwt-secret-for-ci
          JWT_REFRESH_SECRET: test-refresh-secret-for-ci
        run: npm test

      - name: 📊 Generate Test Coverage
        working-directory: ./app
        env:
          NODE_ENV: test
          DB_HOST: localhost
          DB_PORT: 3306
          DB_USER: test_user
          DB_PASSWORD: test_password
          DB_NAME: bluesystem_test
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          JWT_SECRET: test-jwt-secret-for-ci
          JWT_REFRESH_SECRET: test-refresh-secret-for-ci
        run: npm run test:coverage

  # Job 3: Tests del Frontend
  frontend-tests:
    name: 🎨 Frontend Tests
    runs-on: ubuntu-latest
    needs: code-quality

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: 📦 Install Frontend Dependencies
        working-directory: ./frontend
        run: npm ci

      - name: 🏗️ Build Frontend
        working-directory: ./frontend
        run: npm run build

      - name: 🧪 Run Frontend Tests
        working-directory: ./frontend
        run: npm test

  # Job 4: Validación de Docker
  docker-validation:
    name: 🐳 Docker Build Validation
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🐳 Build Backend Docker Image
        uses: docker/build-push-action@v5
        with:
          context: ./app
          file: ./app/Dockerfile
          push: false
          tags: bluesystem-backend:test
          target: production

      - name: 🐳 Build Frontend Docker Image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: false
          tags: bluesystem-frontend:test
          target: production

  # Job 5: Validación de configuración
  config-validation:
    name: ⚙️ Configuration Validation
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔍 Validate Docker Compose Files
        run: |
          docker compose -f docker-compose.yml config
          docker compose -f docker-compose.yml -f docker-compose.dev.yml config

      - name: 🔍 Check Required Files
        run: |
          echo "Checking required files..."
          test -f docker-compose.yml && echo "✅ docker-compose.yml exists"
          test -f docker-compose.dev.yml && echo "✅ docker-compose.dev.yml exists"
          test -f .gitignore && echo "✅ .gitignore exists"
          test -f README.md && echo "✅ README.md exists"
          test -f app/package.json && echo "✅ Backend package.json exists"
          test -f frontend/package.json && echo "✅ Frontend package.json exists"
          test -f app/Dockerfile && echo "✅ Backend Dockerfile exists"
          test -f frontend/Dockerfile && echo "✅ Frontend Dockerfile exists"
          test -f nginx/nginx.conf && echo "✅ Nginx config exists"

      - name: 🔍 Validate Environment Example
        run: |
          if [ -f .env.example ]; then
            echo "✅ .env.example exists"
            echo "Checking required environment variables..."
            grep -q "DB_HOST" .env.example && echo "✅ DB_HOST found"
            grep -q "DB_USER" .env.example && echo "✅ DB_USER found"
            grep -q "JWT_SECRET" .env.example && echo "✅ JWT_SECRET found"
            grep -q "REDIS_HOST" .env.example && echo "✅ REDIS_HOST found"
          else
            echo "⚠️ .env.example not found"
            exit 1
          fi

  # Job 6: Security Scan
  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: code-quality
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 🔍 Run Backend Security Audit
        working-directory: ./app
        run: npm audit --audit-level=high

      - name: 🔍 Run Frontend Security Audit
        working-directory: ./frontend
        run: npm audit --audit-level=high

  # Job 7: Deployment Ready Check
  deployment-ready:
    name: 🚀 Deployment Ready Check
    runs-on: ubuntu-latest
    needs: [docker-validation, config-validation, security-scan]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: ✅ All Checks Passed
        run: |
          echo "🎉 All CI/CD checks passed successfully!"
          echo "🚀 Project is ready for deployment"
          echo "📋 Next steps:"
          echo "   1. Deploy to staging environment"
          echo "   2. Run integration tests"
          echo "   3. Deploy to production"

      - name: 📊 Generate Deployment Summary
        run: |
          echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Code quality checks passed" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Backend tests passed" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Frontend tests passed" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Docker builds successful" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Configuration validated" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Security scans completed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Ready for deployment! 🎉**" >> $GITHUB_STEP_SUMMARY 